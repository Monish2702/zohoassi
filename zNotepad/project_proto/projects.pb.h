// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: projects.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_projects_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_projects_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_projects_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_projects_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_projects_2eproto;
namespace notepad_projects {
class contents;
struct contentsDefaultTypeInternal;
extern contentsDefaultTypeInternal _contents_default_instance_;
class project;
struct projectDefaultTypeInternal;
extern projectDefaultTypeInternal _project_default_instance_;
}  // namespace notepad_projects
PROTOBUF_NAMESPACE_OPEN
template<> ::notepad_projects::contents* Arena::CreateMaybeMessage<::notepad_projects::contents>(Arena*);
template<> ::notepad_projects::project* Arena::CreateMaybeMessage<::notepad_projects::project>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace notepad_projects {

// ===================================================================

class contents final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:notepad_projects.contents) */ {
 public:
  inline contents() : contents(nullptr) {}
  ~contents() override;
  explicit PROTOBUF_CONSTEXPR contents(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  contents(const contents& from);
  contents(contents&& from) noexcept
    : contents() {
    *this = ::std::move(from);
  }

  inline contents& operator=(const contents& from) {
    CopyFrom(from);
    return *this;
  }
  inline contents& operator=(contents&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const contents& default_instance() {
    return *internal_default_instance();
  }
  static inline const contents* internal_default_instance() {
    return reinterpret_cast<const contents*>(
               &_contents_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(contents& a, contents& b) {
    a.Swap(&b);
  }
  inline void Swap(contents* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(contents* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  contents* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<contents>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const contents& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const contents& from) {
    contents::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(contents* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "notepad_projects.contents";
  }
  protected:
  explicit contents(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentLineFieldNumber = 1,
  };
  // string content_line = 1;
  void clear_content_line();
  const std::string& content_line() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content_line(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content_line();
  PROTOBUF_NODISCARD std::string* release_content_line();
  void set_allocated_content_line(std::string* content_line);
  private:
  const std::string& _internal_content_line() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content_line(const std::string& value);
  std::string* _internal_mutable_content_line();
  public:

  // @@protoc_insertion_point(class_scope:notepad_projects.contents)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_line_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_projects_2eproto;
};
// -------------------------------------------------------------------

class project final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:notepad_projects.project) */ {
 public:
  inline project() : project(nullptr) {}
  ~project() override;
  explicit PROTOBUF_CONSTEXPR project(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  project(const project& from);
  project(project&& from) noexcept
    : project() {
    *this = ::std::move(from);
  }

  inline project& operator=(const project& from) {
    CopyFrom(from);
    return *this;
  }
  inline project& operator=(project&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const project& default_instance() {
    return *internal_default_instance();
  }
  static inline const project* internal_default_instance() {
    return reinterpret_cast<const project*>(
               &_project_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(project& a, project& b) {
    a.Swap(&b);
  }
  inline void Swap(project* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(project* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  project* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<project>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const project& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const project& from) {
    project::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(project* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "notepad_projects.project";
  }
  protected:
  explicit project(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentsFieldNumber = 4,
    kProjectNameFieldNumber = 3,
    kProjectIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // repeated .notepad_projects.contents contents = 4;
  int contents_size() const;
  private:
  int _internal_contents_size() const;
  public:
  void clear_contents();
  ::notepad_projects::contents* mutable_contents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notepad_projects::contents >*
      mutable_contents();
  private:
  const ::notepad_projects::contents& _internal_contents(int index) const;
  ::notepad_projects::contents* _internal_add_contents();
  public:
  const ::notepad_projects::contents& contents(int index) const;
  ::notepad_projects::contents* add_contents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notepad_projects::contents >&
      contents() const;

  // string project_name = 3;
  void clear_project_name();
  const std::string& project_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_project_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_project_name();
  PROTOBUF_NODISCARD std::string* release_project_name();
  void set_allocated_project_name(std::string* project_name);
  private:
  const std::string& _internal_project_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project_name(const std::string& value);
  std::string* _internal_mutable_project_name();
  public:

  // int32 project_id = 1;
  void clear_project_id();
  int32_t project_id() const;
  void set_project_id(int32_t value);
  private:
  int32_t _internal_project_id() const;
  void _internal_set_project_id(int32_t value);
  public:

  // int32 user_id = 2;
  void clear_user_id();
  int32_t user_id() const;
  void set_user_id(int32_t value);
  private:
  int32_t _internal_user_id() const;
  void _internal_set_user_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:notepad_projects.project)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notepad_projects::contents > contents_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_name_;
    int32_t project_id_;
    int32_t user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_projects_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// contents

// string content_line = 1;
inline void contents::clear_content_line() {
  _impl_.content_line_.ClearToEmpty();
}
inline const std::string& contents::content_line() const {
  // @@protoc_insertion_point(field_get:notepad_projects.contents.content_line)
  return _internal_content_line();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void contents::set_content_line(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_line_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:notepad_projects.contents.content_line)
}
inline std::string* contents::mutable_content_line() {
  std::string* _s = _internal_mutable_content_line();
  // @@protoc_insertion_point(field_mutable:notepad_projects.contents.content_line)
  return _s;
}
inline const std::string& contents::_internal_content_line() const {
  return _impl_.content_line_.Get();
}
inline void contents::_internal_set_content_line(const std::string& value) {
  
  _impl_.content_line_.Set(value, GetArenaForAllocation());
}
inline std::string* contents::_internal_mutable_content_line() {
  
  return _impl_.content_line_.Mutable(GetArenaForAllocation());
}
inline std::string* contents::release_content_line() {
  // @@protoc_insertion_point(field_release:notepad_projects.contents.content_line)
  return _impl_.content_line_.Release();
}
inline void contents::set_allocated_content_line(std::string* content_line) {
  if (content_line != nullptr) {
    
  } else {
    
  }
  _impl_.content_line_.SetAllocated(content_line, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_line_.IsDefault()) {
    _impl_.content_line_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:notepad_projects.contents.content_line)
}

// -------------------------------------------------------------------

// project

// int32 project_id = 1;
inline void project::clear_project_id() {
  _impl_.project_id_ = 0;
}
inline int32_t project::_internal_project_id() const {
  return _impl_.project_id_;
}
inline int32_t project::project_id() const {
  // @@protoc_insertion_point(field_get:notepad_projects.project.project_id)
  return _internal_project_id();
}
inline void project::_internal_set_project_id(int32_t value) {
  
  _impl_.project_id_ = value;
}
inline void project::set_project_id(int32_t value) {
  _internal_set_project_id(value);
  // @@protoc_insertion_point(field_set:notepad_projects.project.project_id)
}

// int32 user_id = 2;
inline void project::clear_user_id() {
  _impl_.user_id_ = 0;
}
inline int32_t project::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int32_t project::user_id() const {
  // @@protoc_insertion_point(field_get:notepad_projects.project.user_id)
  return _internal_user_id();
}
inline void project::_internal_set_user_id(int32_t value) {
  
  _impl_.user_id_ = value;
}
inline void project::set_user_id(int32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:notepad_projects.project.user_id)
}

// string project_name = 3;
inline void project::clear_project_name() {
  _impl_.project_name_.ClearToEmpty();
}
inline const std::string& project::project_name() const {
  // @@protoc_insertion_point(field_get:notepad_projects.project.project_name)
  return _internal_project_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void project::set_project_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.project_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:notepad_projects.project.project_name)
}
inline std::string* project::mutable_project_name() {
  std::string* _s = _internal_mutable_project_name();
  // @@protoc_insertion_point(field_mutable:notepad_projects.project.project_name)
  return _s;
}
inline const std::string& project::_internal_project_name() const {
  return _impl_.project_name_.Get();
}
inline void project::_internal_set_project_name(const std::string& value) {
  
  _impl_.project_name_.Set(value, GetArenaForAllocation());
}
inline std::string* project::_internal_mutable_project_name() {
  
  return _impl_.project_name_.Mutable(GetArenaForAllocation());
}
inline std::string* project::release_project_name() {
  // @@protoc_insertion_point(field_release:notepad_projects.project.project_name)
  return _impl_.project_name_.Release();
}
inline void project::set_allocated_project_name(std::string* project_name) {
  if (project_name != nullptr) {
    
  } else {
    
  }
  _impl_.project_name_.SetAllocated(project_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.project_name_.IsDefault()) {
    _impl_.project_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:notepad_projects.project.project_name)
}

// repeated .notepad_projects.contents contents = 4;
inline int project::_internal_contents_size() const {
  return _impl_.contents_.size();
}
inline int project::contents_size() const {
  return _internal_contents_size();
}
inline void project::clear_contents() {
  _impl_.contents_.Clear();
}
inline ::notepad_projects::contents* project::mutable_contents(int index) {
  // @@protoc_insertion_point(field_mutable:notepad_projects.project.contents)
  return _impl_.contents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notepad_projects::contents >*
project::mutable_contents() {
  // @@protoc_insertion_point(field_mutable_list:notepad_projects.project.contents)
  return &_impl_.contents_;
}
inline const ::notepad_projects::contents& project::_internal_contents(int index) const {
  return _impl_.contents_.Get(index);
}
inline const ::notepad_projects::contents& project::contents(int index) const {
  // @@protoc_insertion_point(field_get:notepad_projects.project.contents)
  return _internal_contents(index);
}
inline ::notepad_projects::contents* project::_internal_add_contents() {
  return _impl_.contents_.Add();
}
inline ::notepad_projects::contents* project::add_contents() {
  ::notepad_projects::contents* _add = _internal_add_contents();
  // @@protoc_insertion_point(field_add:notepad_projects.project.contents)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notepad_projects::contents >&
project::contents() const {
  // @@protoc_insertion_point(field_list:notepad_projects.project.contents)
  return _impl_.contents_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace notepad_projects

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_projects_2eproto

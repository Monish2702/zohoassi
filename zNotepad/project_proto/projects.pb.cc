// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: projects.proto

#include "projects.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace notepad_projects {
PROTOBUF_CONSTEXPR contents::contents(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.content_line_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct contentsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR contentsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~contentsDefaultTypeInternal() {}
  union {
    contents _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 contentsDefaultTypeInternal _contents_default_instance_;
PROTOBUF_CONSTEXPR project::project(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.contents_)*/{}
  , /*decltype(_impl_.project_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.project_id_)*/0
  , /*decltype(_impl_.user_id_)*/0
  , /*decltype(_impl_.changes_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct projectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR projectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~projectDefaultTypeInternal() {}
  union {
    project _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 projectDefaultTypeInternal _project_default_instance_;
}  // namespace notepad_projects
static ::_pb::Metadata file_level_metadata_projects_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_projects_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_projects_2eproto = nullptr;

const uint32_t TableStruct_projects_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::notepad_projects::contents, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::notepad_projects::contents, _impl_.content_line_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::notepad_projects::project, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::notepad_projects::project, _impl_.project_id_),
  PROTOBUF_FIELD_OFFSET(::notepad_projects::project, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::notepad_projects::project, _impl_.project_name_),
  PROTOBUF_FIELD_OFFSET(::notepad_projects::project, _impl_.contents_),
  PROTOBUF_FIELD_OFFSET(::notepad_projects::project, _impl_.changes_count_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::notepad_projects::contents)},
  { 7, -1, -1, sizeof(::notepad_projects::project)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::notepad_projects::_contents_default_instance_._instance,
  &::notepad_projects::_project_default_instance_._instance,
};

const char descriptor_table_protodef_projects_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016projects.proto\022\020notepad_projects\" \n\010co"
  "ntents\022\024\n\014content_line\030\001 \001(\t\"\211\001\n\007project"
  "\022\022\n\nproject_id\030\001 \001(\005\022\017\n\007user_id\030\002 \001(\005\022\024\n"
  "\014project_name\030\003 \001(\t\022,\n\010contents\030\004 \003(\0132\032."
  "notepad_projects.contents\022\025\n\rchanges_cou"
  "nt\030\005 \001(\005b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_projects_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_projects_2eproto = {
    false, false, 216, descriptor_table_protodef_projects_2eproto,
    "projects.proto",
    &descriptor_table_projects_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_projects_2eproto::offsets,
    file_level_metadata_projects_2eproto, file_level_enum_descriptors_projects_2eproto,
    file_level_service_descriptors_projects_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_projects_2eproto_getter() {
  return &descriptor_table_projects_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_projects_2eproto(&descriptor_table_projects_2eproto);
namespace notepad_projects {

// ===================================================================

class contents::_Internal {
 public:
};

contents::contents(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:notepad_projects.contents)
}
contents::contents(const contents& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  contents* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.content_line_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.content_line_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_line_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content_line().empty()) {
    _this->_impl_.content_line_.Set(from._internal_content_line(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:notepad_projects.contents)
}

inline void contents::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.content_line_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.content_line_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_line_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

contents::~contents() {
  // @@protoc_insertion_point(destructor:notepad_projects.contents)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void contents::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_line_.Destroy();
}

void contents::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void contents::Clear() {
// @@protoc_insertion_point(message_clear_start:notepad_projects.contents)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_line_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* contents::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string content_line = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_content_line();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "notepad_projects.contents.content_line"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* contents::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:notepad_projects.contents)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string content_line = 1;
  if (!this->_internal_content_line().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content_line().data(), static_cast<int>(this->_internal_content_line().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "notepad_projects.contents.content_line");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_content_line(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:notepad_projects.contents)
  return target;
}

size_t contents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:notepad_projects.contents)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content_line = 1;
  if (!this->_internal_content_line().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content_line());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData contents::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    contents::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*contents::GetClassData() const { return &_class_data_; }


void contents::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<contents*>(&to_msg);
  auto& from = static_cast<const contents&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:notepad_projects.contents)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content_line().empty()) {
    _this->_internal_set_content_line(from._internal_content_line());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void contents::CopyFrom(const contents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:notepad_projects.contents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool contents::IsInitialized() const {
  return true;
}

void contents::InternalSwap(contents* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_line_, lhs_arena,
      &other->_impl_.content_line_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata contents::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_projects_2eproto_getter, &descriptor_table_projects_2eproto_once,
      file_level_metadata_projects_2eproto[0]);
}

// ===================================================================

class project::_Internal {
 public:
};

project::project(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:notepad_projects.project)
}
project::project(const project& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  project* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.contents_){from._impl_.contents_}
    , decltype(_impl_.project_name_){}
    , decltype(_impl_.project_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.changes_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.project_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.project_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_project_name().empty()) {
    _this->_impl_.project_name_.Set(from._internal_project_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.project_id_, &from._impl_.project_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.changes_count_) -
    reinterpret_cast<char*>(&_impl_.project_id_)) + sizeof(_impl_.changes_count_));
  // @@protoc_insertion_point(copy_constructor:notepad_projects.project)
}

inline void project::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.contents_){arena}
    , decltype(_impl_.project_name_){}
    , decltype(_impl_.project_id_){0}
    , decltype(_impl_.user_id_){0}
    , decltype(_impl_.changes_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.project_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.project_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

project::~project() {
  // @@protoc_insertion_point(destructor:notepad_projects.project)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void project::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.contents_.~RepeatedPtrField();
  _impl_.project_name_.Destroy();
}

void project::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void project::Clear() {
// @@protoc_insertion_point(message_clear_start:notepad_projects.project)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.contents_.Clear();
  _impl_.project_name_.ClearToEmpty();
  ::memset(&_impl_.project_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.changes_count_) -
      reinterpret_cast<char*>(&_impl_.project_id_)) + sizeof(_impl_.changes_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* project::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 project_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.project_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string project_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_project_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "notepad_projects.project.project_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .notepad_projects.contents contents = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 changes_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.changes_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* project::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:notepad_projects.project)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 project_id = 1;
  if (this->_internal_project_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_project_id(), target);
  }

  // int32 user_id = 2;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_user_id(), target);
  }

  // string project_name = 3;
  if (!this->_internal_project_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_project_name().data(), static_cast<int>(this->_internal_project_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "notepad_projects.project.project_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_project_name(), target);
  }

  // repeated .notepad_projects.contents contents = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_contents_size()); i < n; i++) {
    const auto& repfield = this->_internal_contents(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 changes_count = 5;
  if (this->_internal_changes_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_changes_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:notepad_projects.project)
  return target;
}

size_t project::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:notepad_projects.project)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .notepad_projects.contents contents = 4;
  total_size += 1UL * this->_internal_contents_size();
  for (const auto& msg : this->_impl_.contents_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string project_name = 3;
  if (!this->_internal_project_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_project_name());
  }

  // int32 project_id = 1;
  if (this->_internal_project_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_project_id());
  }

  // int32 user_id = 2;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_user_id());
  }

  // int32 changes_count = 5;
  if (this->_internal_changes_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_changes_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData project::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    project::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*project::GetClassData() const { return &_class_data_; }


void project::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<project*>(&to_msg);
  auto& from = static_cast<const project&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:notepad_projects.project)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.contents_.MergeFrom(from._impl_.contents_);
  if (!from._internal_project_name().empty()) {
    _this->_internal_set_project_name(from._internal_project_name());
  }
  if (from._internal_project_id() != 0) {
    _this->_internal_set_project_id(from._internal_project_id());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_changes_count() != 0) {
    _this->_internal_set_changes_count(from._internal_changes_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void project::CopyFrom(const project& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:notepad_projects.project)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool project::IsInitialized() const {
  return true;
}

void project::InternalSwap(project* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.contents_.InternalSwap(&other->_impl_.contents_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.project_name_, lhs_arena,
      &other->_impl_.project_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(project, _impl_.changes_count_)
      + sizeof(project::_impl_.changes_count_)
      - PROTOBUF_FIELD_OFFSET(project, _impl_.project_id_)>(
          reinterpret_cast<char*>(&_impl_.project_id_),
          reinterpret_cast<char*>(&other->_impl_.project_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata project::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_projects_2eproto_getter, &descriptor_table_projects_2eproto_once,
      file_level_metadata_projects_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace notepad_projects
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::notepad_projects::contents*
Arena::CreateMaybeMessage< ::notepad_projects::contents >(Arena* arena) {
  return Arena::CreateMessageInternal< ::notepad_projects::contents >(arena);
}
template<> PROTOBUF_NOINLINE ::notepad_projects::project*
Arena::CreateMaybeMessage< ::notepad_projects::project >(Arena* arena) {
  return Arena::CreateMessageInternal< ::notepad_projects::project >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
